import {
  describe,
  it,
  expect,
  beforeAll,
  afterAll,
  beforeEach,
} from 'vitest'
import { execSync } from 'child_process'

/**
 * Ref Support Tests
 * 
 * Tests that refs generated by snapshot command can be used
 * with interaction commands (click, type, hover)
 */
describe('ref support for interaction commands', () => {
  const CLI = 'node dist/src/index.js'
  let testTabId: string

  function runCommand(
    cmd: string,
    timeout = 5000
  ): { output: string; exitCode: number } {
    try {
      const output = execSync(cmd, {
        encoding: 'utf8',
        timeout,
        env: { ...process.env },
        stdio: 'pipe',
      })
      return { output, exitCode: 0 }
    } catch (error: any) {
      if (error.code === 'ETIMEDOUT') {
        throw new Error(`Command timed out: ${cmd}`)
      }
      const output = (error.stdout || '') + (error.stderr || '')
      return { output, exitCode: error.status || 1 }
    }
  }

  function extractTabId(output: string): string {
    const match = output.match(/Tab ID: ([A-F0-9-]+)/)
    if (!match) {
      throw new Error(`No tab ID found in output: ${output}`)
    }
    return match[1]
  }

  function extractRef(output: string, elementText?: string): string {
    // Extract ref from snapshot output like: button "Submit" [ref=abc123]
    const pattern = elementText 
      ? new RegExp(`"${elementText}".*?\\[ref=([a-f0-9]+)\\]`)
      : /\[ref=([a-f0-9]+)\]/
    
    const match = output.match(pattern)
    if (!match) {
      throw new Error(`No ref found in output${elementText ? ` for "${elementText}"` : ''}: ${output}`)
    }
    return match[1]
  }

  beforeAll(async () => {
    // Create test page with interactive elements
    const html = `
      <html>
        <body>
          <button id="test-button" onclick="this.textContent='Clicked'">Click Me</button>
          <input id="test-input" type="text" placeholder="Type here">
          <a id="test-link" href="#" onmouseover="this.style.color='red'">Hover Me</a>
          <form>
            <input name="email" type="email" placeholder="Email">
            <input name="password" type="password" placeholder="Password">
            <button type="submit">Submit</button>
          </form>
        </body>
      </html>
    `
    const { output } = runCommand(
      `${CLI} tabs new --url "data:text/html,${encodeURIComponent(html)}"`
    )
    testTabId = extractTabId(output)
  })

  afterAll(async () => {
    if (testTabId) {
      runCommand(`${CLI} tabs close --tab-id ${testTabId}`)
    }
  })

  describe('click command with --ref', () => {
    it('should click element using ref from snapshot', async () => {
      // Get snapshot to find refs
      const { output: snapshotOutput } = runCommand(
        `${CLI} snapshot --tab-id ${testTabId}`
      )
      
      // Extract ref for the button
      const buttonRef = extractRef(snapshotOutput, 'Click Me')
      
      // Click using ref
      const { output: clickOutput, exitCode } = runCommand(
        `${CLI} click --ref ${buttonRef} --tab-id ${testTabId}`
      )
      
      expect(exitCode).toBe(0)
      expect(clickOutput).toContain('Clicked')
      
      // Verify button text changed
      const { output: evalOutput } = runCommand(
        `${CLI} eval "document.getElementById('test-button').textContent" --tab-id ${testTabId}`
      )
      expect(evalOutput).toContain('Clicked')
    })

    it('should fail gracefully with invalid ref', async () => {
      const { output, exitCode } = runCommand(
        `${CLI} click --ref invalid123 --tab-id ${testTabId}`
      )
      
      expect(exitCode).toBe(1)
      expect(output.toLowerCase()).toContain('ref not found')
    })
  })

  describe('type command with --ref', () => {
    it('should type into input using ref from snapshot', async () => {
      // Get snapshot
      const { output: snapshotOutput } = runCommand(
        `${CLI} snapshot --tab-id ${testTabId}`
      )
      
      // Extract ref for input
      const inputRef = extractRef(snapshotOutput, 'Type here')
      
      // Type using ref
      const { output: typeOutput, exitCode } = runCommand(
        `${CLI} type --ref ${inputRef} "Hello World" --tab-id ${testTabId}`
      )
      
      expect(exitCode).toBe(0)
      expect(typeOutput).toContain('Typed')
      
      // Verify input value
      const { output: evalOutput } = runCommand(
        `${CLI} eval "document.getElementById('test-input').value" --tab-id ${testTabId}`
      )
      expect(evalOutput).toContain('Hello World')
    })
  })

  describe('hover command with --ref', () => {
    it('should hover over element using ref from snapshot', async () => {
      // Get snapshot
      const { output: snapshotOutput } = runCommand(
        `${CLI} snapshot --tab-id ${testTabId}`
      )
      
      // Extract ref for link
      const linkRef = extractRef(snapshotOutput, 'Hover Me')
      
      // Hover using ref
      const { output: hoverOutput, exitCode } = runCommand(
        `${CLI} hover --ref ${linkRef} --tab-id ${testTabId}`
      )
      
      expect(exitCode).toBe(0)
      expect(hoverOutput).toContain('Hovered')
      
      // Note: Verifying hover effect is tricky in headless mode
      // but we can at least verify the command succeeded
    })
  })

  describe('fill command with --ref', () => {
    it('should fill form field using ref from snapshot', async () => {
      // Get snapshot
      const { output: snapshotOutput } = runCommand(
        `${CLI} snapshot --tab-id ${testTabId}`
      )
      
      // Extract ref for email input
      const emailRef = extractRef(snapshotOutput, 'Email')
      
      // Fill using ref
      const { output: fillOutput, exitCode } = runCommand(
        `${CLI} fill --ref ${emailRef} "test@example.com" --tab-id ${testTabId}`
      )
      
      expect(exitCode).toBe(0)
      expect(fillOutput).toContain('Filled')
      
      // Verify input value
      const { output: evalOutput } = runCommand(
        `${CLI} eval "document.querySelector('[name=email]').value" --tab-id ${testTabId}`
      )
      expect(evalOutput).toContain('test@example.com')
    })
  })

  describe('ref persistence', () => {
    it('should maintain consistent refs between snapshot calls', async () => {
      // Get snapshot twice
      const { output: snapshot1 } = runCommand(
        `${CLI} snapshot --tab-id ${testTabId}`
      )
      const { output: snapshot2 } = runCommand(
        `${CLI} snapshot --tab-id ${testTabId}`
      )
      
      // Extract refs from both
      const ref1 = extractRef(snapshot1, 'Click Me')
      const ref2 = extractRef(snapshot2, 'Click Me')
      
      // Refs should be consistent for same elements
      expect(ref1).toBe(ref2)
    })

    it('should update refs when page changes', async () => {
      // Get initial snapshot
      const { output: snapshot1 } = runCommand(
        `${CLI} snapshot --tab-id ${testTabId}`
      )
      const initialRefs = snapshot1.match(/\[ref=[a-f0-9]+\]/g) || []
      
      // Add new element to page
      runCommand(
        `${CLI} eval "document.body.innerHTML += '<button>New Button</button>'" --tab-id ${testTabId}`
      )
      
      // Get new snapshot
      const { output: snapshot2 } = runCommand(
        `${CLI} snapshot --tab-id ${testTabId}`
      )
      const updatedRefs = snapshot2.match(/\[ref=[a-f0-9]+\]/g) || []
      
      // Should have more refs after adding element
      expect(updatedRefs.length).toBeGreaterThan(initialRefs.length)
    })
  })
})