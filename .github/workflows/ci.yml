name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.48.0-jammy
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: |
        bun install
        pnpm install
    
    - name: TypeScript type checking
      run: pnpm run typecheck
    
    - name: Run ESLint
      run: |
        pnpm run lint -- --format json --output-file eslint-report.json || echo '[]' > eslint-report.json
    
    - name: Run Prettier check
      run: pnpm run format:check
    
    - name: Run tests with coverage
      run: bun test --coverage
    
    - name: Build project
      run: pnpm run build:ts
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Check coverage thresholds
      run: |
        bun test --coverage --reporter=json > coverage.json
        node -e "
          const coverage = require('./coverage.json');
          const thresholds = { branches: 80, functions: 80, lines: 80, statements: 80 };
          let failed = false;
          Object.keys(thresholds).forEach(key => {
            const actual = coverage.total[key]?.pct || 0;
            if (actual < thresholds[key]) {
              console.error(\`❌ Coverage threshold not met for \${key}: \${actual}% < \${thresholds[key]}%\`);
              failed = true;
            } else {
              console.log(\`✅ Coverage threshold met for \${key}: \${actual}% >= \${thresholds[key]}%\`);
            }
          });
          if (failed) process.exit(1);
        "
    
    - name: Upload ESLint report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-report
        path: eslint-report.json
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read ESLint report if it exists
          let eslintReport = '';
          try {
            const eslintData = JSON.parse(fs.readFileSync('eslint-report.json', 'utf8'));
            const errorCount = eslintData.reduce((sum, file) => sum + file.errorCount, 0);
            const warningCount = eslintData.reduce((sum, file) => sum + file.warningCount, 0);
            eslintReport = `ESLint: ${errorCount} errors, ${warningCount} warnings`;
          } catch (e) {
            eslintReport = 'ESLint: Report not generated';
          }
          
          // Read coverage if it exists
          let coverageReport = '';
          try {
            const coverageData = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
            const lines = coverageData.total?.lines?.pct || 0;
            const functions = coverageData.total?.functions?.pct || 0;
            const branches = coverageData.total?.branches?.pct || 0;
            const statements = coverageData.total?.statements?.pct || 0;
            coverageReport = `Coverage: ${lines}% lines, ${functions}% functions, ${branches}% branches, ${statements}% statements`;
          } catch (e) {
            coverageReport = 'Coverage: Report not generated';
          }
          
          const comment = `## 🤖 CI Results
          
          ${eslintReport}
          ${coverageReport}
          
          Build: ${{ job.status }}
          
          *Generated by GitHub Actions*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build-artifacts:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: |
        bun install
        pnpm install
    
    - name: Build for production
      run: pnpm run build:ts
    
    - name: Build Bun executable (Unix)
      if: runner.os != 'Windows'
      run: pnpm run build:bun
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: |
          dist/
          playwright-bun
          playwright
        retention-days: 30